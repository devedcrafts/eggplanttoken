{"version":3,"sources":["eggplantlogo.svg","Document.pdf","rainingeggplantsplain.svg","getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","donations","donationAmount","nextAirdrop","componentDidMount","document","title","submitDonation","bind","airdrop","changeDonation","eth","getAccounts","net","getId","networkId","deployedNetwork","Eggplant","networks","instance","Contract","abi","address","setState","initSiteState","alert","error","refreshDonations","refreshNextAirdrop","data","index","item","style","date","Moment","unix","format","adjustedAmount","amount","ListItem","key","component","disablePadding","ListItemText","primary","donor","color","event","this","target","value","methods","getDonations","call","from","preventDefault","donate","send","getNextAirdrop","checkAirdropAvailability","result","className","rel","href","src","eggplantlogo","Pdf","class","onClick","rainingeggplants","onSubmit","type","step","min","required","onChange","Box","sx","width","height","maxWidth","bgcolor","border","itemData","reverse","itemSize","itemCount","length","renderRow","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38af5db9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eggplantlogo.50c1490d.svg\";","module.exports = __webpack_public_path__ + \"static/media/Document.4b41a347.pdf\";","module.exports = __webpack_public_path__ + \"static/media/rainingeggplantsplain.8f85aceb.svg\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n\tconst web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport Eggplant from \"./contracts/Eggplant.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport { FixedSizeList } from 'react-window';\nimport Moment from 'moment';\nimport Pdf from './Document.pdf';\nimport rainingeggplants from './rainingeggplantsplain.svg';\nimport eggplantlogo from './eggplantlogo.svg';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, donations: [], donationAmount: 0, nextAirdrop: 0 };\n\n  componentDidMount = async () => {\n   document.title = \"Eggplant Token\"\n\n    this.submitDonation = this.submitDonation.bind(this);\n    this.airdrop = this.airdrop.bind(this);\n    this.changeDonation = this.changeDonation.bind(this);\n    \n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Eggplant.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Eggplant.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.initSiteState);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  renderRow({ data, index, style }) {\n\n    const item = data[index];\n    const date =  Moment.unix(item.date).format(\"YYYY-MM-DD\");\n    const adjustedAmount = item.amount / (10 ** 18);\n\n    return (\n      <ListItem style={{'margin-top': '8px', 'margin-bottom':'16px'}} key={index} component=\"div\" disablePadding>\n          <ListItemText primary={<div><span style={{'margin-left': '16px', 'color':'#50fa7b', 'margin-right': '18px'}}>Donor</span>{item.donor}<br/> <span style={{'margin-left': '16px', 'color':'#50fa7b', 'margin-right': '2px'}}>Amount</span> {adjustedAmount} BNB<br/><span style={{'margin-left': '16px', 'color':'#50fa7b', 'margin-right': '25px'}}>Date</span> {date}<hr style={{color:'#50fa7b'}}/></div>} />\n      </ListItem>\n    );\n  }\n\n  changeDonation(event) {    this.setState({donationAmount: event.target.value});  }\n\n\n  async refreshDonations() {\n      const { contract, accounts } = this.state;\n      const donations = await contract.methods.getDonations().call({from: accounts[0]});\n      if (donations != null) {\n        this.setState({donations: donations});\n      }\n  }\n\n  async submitDonation(event) {\n    event.preventDefault();\n    const { accounts, contract, donationAmount } = this.state;\n    await contract.methods.donate().send({from: accounts[0], value: donationAmount * 10 ** 18 });\n    this.refreshDonations()\n  }\n\n  async refreshNextAirdrop() {\n      const { contract, accounts } = this.state;\n      const nextAirdrop = await contract.methods.getNextAirdrop().call({from: accounts[0]}) / (10 ** 18);\n      this.setState({nextAirdrop: nextAirdrop})\n  }\n\n  async airdrop() {\n      const { accounts, contract } = this.state;\n\n      const result = await contract.methods.checkAirdropAvailability().call({from: accounts[0]});\n      if (result == 0) {\n          alert(\"Only one airdrop per user is allowed.\")\n      } else if (result == 1) {\n          alert(\"Airdrop supply is empty.\")\n      } else {\n           await contract.methods.airdrop().send({from: accounts[0]});\n          this.refreshNextAirdrop();\n      }\n  }\n\n  initSiteState = async () => {\n    this.refreshDonations();\n    this.refreshNextAirdrop();\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n\n        <h1>Eggplant Token <img src={eggplantlogo}/></h1>\n\n        <p>Eggplant Token <img src={eggplantlogo}/> (<span style={{'color':'#50fa7b'}}>EPT</span>) is a BEP-20 meme\n        token with <span style={{'color':'#50fa7b'}}>zero token fees</span>. It has become all too common for meme tokens\n        to include additional fees to those imposed by the BSC network and the team behind EPT finds that unfair. In\n        a bid to maximise user satisfaction EPT also introduces renewed tokenomics like\n        <span style={{'color':'#50fa7b'}}> self-service airdrops</span>. These and the rest of EPT's tokenomics can\n        be read from the <a href = {Pdf} rel=\"noopener noreferrer\" target = \"_blank\" style={{'color':'#50fa7b', 'text-decoration': 'none'}}>whitepaper <i class=\"fa fa-file-pdf-o\"></i></a>.</p>\n\n\n\n\n\n\n        <h2>Self-service Airdrops</h2>\n\n\n<section class=\"container\">\n  <div class=\"left-half\">\n\n  </div>\n  <div class=\"right-half\">\n  </div>\n</section>\n\n\n\n<section class=\"container\">\n  <div class=\"left-half\">\n      <p>EPT has a dedicated <span style={{'color':'#50fa7b'}}>airdrop pool of tokens</span> from which first time\n               users can acquire a small amount of <span style={{'color':'#50fa7b'}}>free</span> EPT.</p>\n               <p>Each subsequent user gets a smaller amount of airdropped tokens until the airdrop pool is emptied. The\n               size of the airdrop pool and the airdrop payout scheme are detailed in the whitepaper.</p>\n\n              <p>Next airdrop is <span style={{'color':'#50fa7b'}}>{this.state.nextAirdrop} EPT</span>\n              <button class=\"button2\" onClick={this.airdrop}>Claim</button></p>\n  </div>\n  <div class=\"right-half\"><img src={rainingeggplants}/></div>\n</section>\n\n\n\n\n\n        <h2>Supporting only some of the developers</h2>\n        <section class=\"container\">\n          <div class=\"left-half\">\n        <p>Creating and maintaining tokens is hard work. To maintain token communities alive devs often include fees in their tokenomics. By removing all token fees, users can be sure what they pay is what they get. However, this removes the main source of funding.\n          .If you'd like to support the developers you may consider donating. All donations are highly appreciated and will be used to support the development of future projects. Suggestions for improvements are also welcome (see bottom of site for contact details).</p>\n        <p>Donations via this site are audited in the Donation Box to provide transparency to our users.</p>\n      <form onSubmit={this.submitDonation}>\n     \t<span style={{'color':'#50fa7b'}}>Amount (BNB)</span> <input type=\"number\" step=\"any\" min='0.00001' required onChange={this.changeDonation.bind(this)}/>\n  \t<input type=\"submit\" class=\"button1\" value=\"Donate\"/>\n      </form>\n           </div>\n            <div class=\"right-half\">\n\n      <Box sx={{width: '100%', height: 320, maxWidth: 517, bgcolor: 'transparent', border: '2px solid #50fa7b', 'border-radius': '6px' }}>\n            <FixedSizeList\n              height={320}\n              width={517}\n              itemData={this.state.donations.reverse()}\n              itemSize={100}\n              itemCount={this.state.donations.length}>\n              {this.renderRow}\n            </FixedSizeList>\n          </Box>\n       </div>\n     </section>\n      <h3>About</h3>\n      <div style={{'font-size': '90%', 'line-height': '0.9'}}>\n      <p><a style={{color: '#f8f8f2', 'text-decoration': 'none'}} href=\"mailto:devedcrafts@protonmail.com\"><i class=\"fa fa-envelope\" style={{'color':'#50fa7b'}}></i> devedcrafts</a></p>\n      <p><a style={{color: '#f8f8f2', 'text-decoration': 'none'}} href=\"https://t.me/eggplant_token\" target=\"_blank\" rel=\"noopener noreferrer\"><i class=\"fa fa-telegram\" style={{'color':'#50fa7b', 'font-size':'20px'}}></i> eggplant_token</a></p>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}